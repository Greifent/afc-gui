#!/usr/bin/env python3

import subprocess as sub
import webbrowser as wb
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, GLib
import os

#=========================================================================================
#define presets

full = "20 21 22 23 24 25 26 27"
threequarter = "20 21 22 23 24 25"			#Some presets will be comleted depending on the model of the laptop
half = "20 21 22 23"
onequarter = "20 21"
off = "85 86 87 88 89 90 91 92"

#==========================================================================================
# Change .glade path if testing or not

testing = False

if testing:
	pathhome = os.environ['HOME']
	pathglade = pathhome + "/gitRepository/afc-gui/prgm/MAINGUI.glade"

else:
	pathglade = "/usr/share/afc-gui/MAINGUI.glade"

#==========================================================================================
#Define function for adjusting text
def modelinfo_fun():

	try:
		modelinfo = sub.check_output("sudo asus-fan-control model-info", shell=True, stderr=sub.STDOUT)
		modelinfo = modelinfo.decode("utf-8")
		modelinfo = modelinfo.replace("\n", " \n")
		modelinfo = "Those are the information of your model: \n" + modelinfo
		return(modelinfo)

	except sub.CalledProcessError:
		return("Error, cannot get model info")

def about_fun():

	try:
		about = sub.check_output("asus-fan-control about", shell=True, stderr=sub.STDOUT)
		about = about.decode("utf-8")
		about = about.replace("\n", " \n")
		about = about.replace("github.com/dominiksalvet/asus-fan-control", "")
		about = "Current version of asus-fan-control running: \n" + about
		return(about)

	except sub.CalledProcessError:
		return("Error, cannot get about")

def gettemps_fun():

	try:
		gettemps = sub.check_output("sudo asus-fan-control get-temps", shell=True, stderr=sub.STDOUT)
		gettemps = gettemps.decode("utf-8")
		gettemps = gettemps.replace("\n", " \n")
		gettemps = "Those are the active temperatures: \n" + gettemps
		return(gettemps)

	except sub.CalledProcessError:
		return("Error, cannot get temperatures")

#End define function for adjusting text
#==========================================================================================
#From modelinfo_fun remove anything but the temperatures

#modelinfo = "Those are the information of your model: \n name GL553VD \n addresses 1335 \n default-temps 60 65 67 70 73 77 81 85 \n tested true" #This only for testing, it should be modelinfo_fun()
modelinfo = modelinfo_fun()
indx = modelinfo.find("default-temps")
modelinfo = modelinfo[indx:]
separator = "tested"
modelinfo = modelinfo.split(separator, 1)[0]
modelinfo = modelinfo.replace("default-temps", "")
modelinfo = modelinfo.replace(" \n ", "")

#==========================================================================================
#Adjust presets
#This should be the procedure to complete every preset, for full leave untouched and for off not sure.
#This whole thing could be completely useless, since the default temp fluctuate a lot between the models, see github.com/dominiksalvet/asus-fan-control/blob/master/data/models for reference
#before submitting to github see what dominiksalvet has to say about this.

xThreeQuarter = modelinfo[-6:]				#Take only the last x characters of modelinfo (for the last two numbers is -6: it give " 81 85")
threequarter = threequarter + xThreeQuarter	#Add those x characters to threequarter to complete the presets
#Now half and onequarter will be complete as before (for half x=12, and for onequarter x=18 (add 6 for each interval))
xHalf = modelinfo[-12:]
half = half + xHalf
xOneQuarter = modelinfo[-18:]
onequarter = onequarter + xOneQuarter

#==========================================================================================
#Class to handle buttons

class Handler:

	def customtemps(self, button):
		inputtemps = builder.get_object("inputtemps")
		inputtemps = inputtemps.get_text()
		if len(inputtemps) == 23:						#Check if the lenght of inputtemps is equal to 23 send those values to setTemps()
			setTemps(inputtemps)						#That condition may be changed to only accept valid values, now it is to the end user to insert valid values

	def defaulttemps(self, button):
		setTemps("default")

	def helppressed(self, button):
		wb.open_new_tab('https://github.com/dominiksalvet/asus-fan-control/wiki')

	def full(self, button):
		setTemps(full)

	def trequart(self, button):
		setTemps(threequarter)

	def half(self, button):
		setTemps(half)

	def onequart(self, button):
		setTemps(onequarter)

	def off(self, button):
		setTemps(off)

#End class to handle buttons
#==========================================================================================
#Function to update temperatures label

def updateTemps():
	activeLabel = gettemps_fun()
	active.set_label(activeLabel)

#==========================================================================================
#Function that sets the temperature

def setTemps(temperatures):
	command = "sudo asus-fan-control set-temps " + temperatures
	sub.call(command, shell=True)
	updateTemps()

#==========================================================================================
#Open .glade file and set labels

builder = Gtk.Builder()
builder.add_from_file(pathglade)
builder.connect_signals(Handler())

window = builder.get_object("GtkWindow")

notebook = builder.get_object('notebook1')

custom = builder.get_object("custom")
custom.set_label("Set custom temps")

default = builder.get_object("default")
default.set_label("Set default temps")

modelinfo = builder.get_object("modelinfo")
modelinfo.set_label(modelinfo_fun())

about = builder.get_object("about")
about.set_label(about_fun())

active = builder.get_object("active")
updateTemps()

customtempsinfo = builder.get_object("customtempsinfo")
customtempsinfo.set_label("In the following section you can choose to set your own temperatures \n (enter 8 values, in celsius, separed by a space and press Set custom temps) \n or reimpost the default ones")

help = builder.get_object("help")
help.set_label("Open project wiki page")

preset = builder.get_object("preset")
preset.set_label("Here you can select a preset \n(note that if the temperature is more than 85Â°C the fan will go to 100%).")


#End open ad apply labels
#==========================================================================================
#Open window

window.connect("delete-event", Gtk.main_quit)
window.show_all()
notebook.set_current_page(0)
Gtk.main()

#Close window
